// src/ppu/types.ts

export interface Pixel {
  r: number;
  g: number;
  b: number;
  a: number;
}

export interface RendererOptions {
  scanlines?: boolean;
  overscan?: boolean;
}

/**
 * Paleta NTSC de 64 cores usada amplamente em emuladores (variante da listada na nesdev wiki).
 * Valores em RGB com alpha 255. A ordem é 0x00..0x3F.
 *
 * Referência comum (hex):
 * Row 0: 7C7C7C 0000FC 0000BC 4428BC 940084 A80020 A81000 881400 503000 007800 006800 005800 004058 000000 000000 000000
 * Row 1: BCBCBC 0078F8 0058F8 6844FC D800CC E40058 F83800 E45C10 AC7C00 00B800 00A800 00A844 008888 000000 000000 000000
 * Row 2: F8F8F8 3CBCFC 6888FC 9878F8 F878F8 F85898 F87858 FCA044 F8B800 B8F818 58D858 58F898 00E8D8 787878 000000 000000
 * Row 3: FCFCFC A4E4FC B8B8F8 D8B8F8 F8B8F8 F8A4C0 F0D0B0 FCE0A8 F8D878 D8F878 B8F8B8 B8F8D8 00FCFC F8D8F8 000000 000000
 */
export const NES_PALETTE: Pixel[] = [
  // 0x00 - 0x0F
  { r: 0x7C, g: 0x7C, b: 0x7C, a: 255 }, // 0x00
  { r: 0x00, g: 0x00, b: 0xFC, a: 255 }, // 0x01
  { r: 0x00, g: 0x00, b: 0xBC, a: 255 }, // 0x02
  { r: 0x44, g: 0x28, b: 0xBC, a: 255 }, // 0x03
  { r: 0x94, g: 0x00, b: 0x84, a: 255 }, // 0x04
  { r: 0xA8, g: 0x00, b: 0x20, a: 255 }, // 0x05
  { r: 0xA8, g: 0x10, b: 0x00, a: 255 }, // 0x06
  { r: 0x88, g: 0x14, b: 0x00, a: 255 }, // 0x07
  { r: 0x50, g: 0x30, b: 0x00, a: 255 }, // 0x08
  { r: 0x00, g: 0x78, b: 0x00, a: 255 }, // 0x09
  { r: 0x00, g: 0x68, b: 0x00, a: 255 }, // 0x0A
  { r: 0x00, g: 0x58, b: 0x00, a: 255 }, // 0x0B
  { r: 0x00, g: 0x40, b: 0x58, a: 255 }, // 0x0C
  { r: 0x00, g: 0x00, b: 0x00, a: 255 }, // 0x0D
  { r: 0x00, g: 0x00, b: 0x00, a: 255 }, // 0x0E
  { r: 0x00, g: 0x00, b: 0x00, a: 255 }, // 0x0F

  // 0x10 - 0x1F
  { r: 0xBC, g: 0xBC, b: 0xBC, a: 255 }, // 0x10
  { r: 0x00, g: 0x78, b: 0xF8, a: 255 }, // 0x11
  { r: 0x00, g: 0x58, b: 0xF8, a: 255 }, // 0x12
  { r: 0x68, g: 0x44, b: 0xFC, a: 255 }, // 0x13
  { r: 0xD8, g: 0x00, b: 0xCC, a: 255 }, // 0x14
  { r: 0xE4, g: 0x00, b: 0x58, a: 255 }, // 0x15
  { r: 0xF8, g: 0x38, b: 0x00, a: 255 }, // 0x16
  { r: 0xE4, g: 0x5C, b: 0x10, a: 255 }, // 0x17
  { r: 0xAC, g: 0x7C, b: 0x00, a: 255 }, // 0x18
  { r: 0x00, g: 0xB8, b: 0x00, a: 255 }, // 0x19
  { r: 0x00, g: 0xA8, b: 0x00, a: 255 }, // 0x1A
  { r: 0x00, g: 0xA8, b: 0x44, a: 255 }, // 0x1B
  { r: 0x00, g: 0x88, b: 0x88, a: 255 }, // 0x1C
  { r: 0x00, g: 0x00, b: 0x00, a: 255 }, // 0x1D
  { r: 0x00, g: 0x00, b: 0x00, a: 255 }, // 0x1E
  { r: 0x00, g: 0x00, b: 0x00, a: 255 }, // 0x1F

  // 0x20 - 0x2F
  { r: 0xF8, g: 0xF8, b: 0xF8, a: 255 }, // 0x20
  { r: 0x3C, g: 0xBC, b: 0xFC, a: 255 }, // 0x21
  { r: 0x68, g: 0x88, b: 0xFC, a: 255 }, // 0x22
  { r: 0x98, g: 0x78, b: 0xF8, a: 255 }, // 0x23
  { r: 0xF8, g: 0x78, b: 0xF8, a: 255 }, // 0x24
  { r: 0xF8, g: 0x58, b: 0x98, a: 255 }, // 0x25
  { r: 0xF8, g: 0x78, b: 0x58, a: 255 }, // 0x26
  { r: 0xFC, g: 0xA0, b: 0x44, a: 255 }, // 0x27
  { r: 0xF8, g: 0xB8, b: 0x00, a: 255 }, // 0x28
  { r: 0xB8, g: 0xF8, b: 0x18, a: 255 }, // 0x29
  { r: 0x58, g: 0xD8, b: 0x58, a: 255 }, // 0x2A
  { r: 0x58, g: 0xF8, b: 0x98, a: 255 }, // 0x2B
  { r: 0x00, g: 0xE8, b: 0xD8, a: 255 }, // 0x2C
  { r: 0x78, g: 0x78, b: 0x78, a: 255 }, // 0x2D
  { r: 0x00, g: 0x00, b: 0x00, a: 255 }, // 0x2E
  { r: 0x00, g: 0x00, b: 0x00, a: 255 }, // 0x2F

  // 0x30 - 0x3F
  { r: 0xFC, g: 0xFC, b: 0xFC, a: 255 }, // 0x30
  { r: 0xA4, g: 0xE4, b: 0xFC, a: 255 }, // 0x31
  { r: 0xB8, g: 0xB8, b: 0xF8, a: 255 }, // 0x32
  { r: 0xD8, g: 0xB8, b: 0xF8, a: 255 }, // 0x33
  { r: 0xF8, g: 0xB8, b: 0xF8, a: 255 }, // 0x34
  { r: 0xF8, g: 0xA4, b: 0xC0, a: 255 }, // 0x35
  { r: 0xF0, g: 0xD0, b: 0xB0, a: 255 }, // 0x36
  { r: 0xFC, g: 0xE0, b: 0xA8, a: 255 }, // 0x37
  { r: 0xF8, g: 0xD8, b: 0x78, a: 255 }, // 0x38
  { r: 0xD8, g: 0xF8, b: 0x78, a: 255 }, // 0x39
  { r: 0xB8, g: 0xF8, b: 0xB8, a: 255 }, // 0x3A
  { r: 0xB8, g: 0xF8, b: 0xD8, a: 255 }, // 0x3B
  { r: 0x00, g: 0xFC, b: 0xFC, a: 255 }, // 0x3C
  { r: 0xF8, g: 0xD8, b: 0xF8, a: 255 }, // 0x3D
  { r: 0x00, g: 0x00, b: 0x00, a: 255 }, // 0x3E
  { r: 0x00, g: 0x00, b: 0x00, a: 255 }, // 0x3F
];

/**
 * Versão empacotada (u32 RGBA) para escrever direto em ImageData (Uint32Array),
 * evitando custo por-pixel de recompor RGBA.
 */
export const NES_PALETTE_RGBA = new Uint32Array(64);
for (let i = 0; i < 64; i++) {
  const c = NES_PALETTE[i];
  NES_PALETTE_RGBA[i] = ((c.a & 0xFF) << 24) | ((c.b & 0xFF) << 16) | ((c.g & 0xFF) << 8) | (c.r & 0xFF);
}
